#!/bin/sh

ELM_VERSION="0.18"

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

wait_for_input() {
  fancy_echo "$1"
  read -n 1
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@" --no-document
  fi
}

pip_install_or_update() {
  local package="$1"
  if pip_is_installed $package > /dev/null; then
    fancy_echo "Updating %s ..." "$package"
    pip3 install --upgrade $package
  else
    fancy_echo "Installing %s ..." "$package"
    pip3 install $package
  fi
}

pip_is_installed() {
  pip3 list | grep "$1"
}

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

generate_ssh_key() {
  ssh-keygen -a 100 -t ed25519
  ssh-add ~/.ssh/id_ed25519
  pbcopy < ~/.ssh/id_ed25519.pub
}

yarn_is_installed() {
  yarn global ls | grep "$1"
}

yarn_install_or_update() {
  local package="$1"
  if yarn_is_installed $package > /dev/null; then
    yarn global upgrade $package
  else
    yarn global add $package
  fi
}

cargo_install() {
  cargo install "$1" --force
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew tap Homebrew/bundle

make brew

if ! command -v elm-format >/dev/null; then
  fancy_echo "Linking elm-format"
  ln -s "/usr/local/bin/elm-format-$ELM_VERSION" /usr/local/bin/elm-format
fi

if ! cat /etc/shells | grep -Fq fish; then
  fancy_echo "Adding fish to /etc/shells"
  echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
fi

if ! cat /etc/shells | grep -Fq '/usr/local/bin/zsh'; then
  fancy_echo "Adding brew zsh to /etc/shells"
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells
fi

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  if [[ ! -f ~/.ssh/id_ed25519.pub ]]; then
    generate_ssh_key
    wait_for_input "Please add the SSH key to GitHub"
  fi

fancy_echo "Checking for GPG Key, generating one if it doesn't exist ..."
  if [[ ! -f ~/.gnupg/pubring.gpg ]]; then
    gpg --gen-key
    gpg_pub_key="$(gpg --list-keys --keyid-format LONG | grep pub | awk '{print $2}' | awk -F '/' '{print $2}' | xargs)"
    local_gitconfig="$HOME/.gitconfig.local"

    git config --file="$local_gitconfig" user.signingkey "$gpg_pub_key"
    gpg --armor --export | pbcopy
    git config --file="$local_gitconfig" commit.gpgsign true
    wait_for_input "Please add the GPG key to GitHub"
  fi

# Ruby Install
ruby_version="$(find_latest_ruby)"
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global $ruby_version
rbenv shell "$ruby_version"

# Gems

gem update --system

gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

gem_install_or_update 'cocoapods'
gem_install_or_update 'xcode-install'

if [ ! -d "$HOME/.dotfiles/" ]; then
  git clone git@github.com:NanoXD/dotfiles.git ~/.dotfiles
  rcup -x apps
fi

if [ ! -e "$HOME/.tmux" ]; then
  mkdir -p $HOME/.tmux
  git clone git@github.com:tmux-plugins/tmux-sessionist.git ~/.tmux/sessionist
fi

pip_install_or_update 'diff-highlight'
pip_install_or_update 'neovim'
pip_install_or_update 'jedi'

make atom

# Yarn
yarn_install_or_update 'tern'
yarn_install_or_update 'clipboard-cli'
yarn_install_or_update 'elm-oracle'
yarn_install_or_update 'release'

fancy_echo "Installing Rust"
if [ ! -e "$HOME/.cabal/bin" ]; then
  curl https://sh.rustup.rs -sSf | sh
  append_to_zshrc 'export PATH="$HOME/.cabal/bin:$PATH"' 1

  source $HOME/.cargo/env
  rustup component add rust-src
fi

# Rust
cargo_install 'cargo-update'
cargo_install 'racer'
cargo_install 'rustfmt'
cargo_install 'clippy'
