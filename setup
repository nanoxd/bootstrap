#!/bin/zsh

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

cask_is_installed() {
  brew cask list -1 | grep -Fqx "$1"
}

cask_install() {
  if cask_is_installed "$1"; then
    fancy_echo "Already installed %s. Skipping ..." "$1"
  else
    fancy_echo "Installing %s ..." "$1"
    brew cask install "$@"
  fi
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@" --no-document
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

# Git formulas
brew_install_or_upgrade 'git'
brew_install_or_upgrade 'git-extras'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'tig'

brew_install_or_upgrade 'fish' '--HEAD'
if ! cat /etc/shells | grep -Fq fish; then
  fancy_echo "Adding fish to /etc/shells"
  echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
fi

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -b 4096 -a 100 -C "nano@fdp.io"
  ssh-add ~/.ssh/id_rsa
  pbcopy < ~/.ssh/id_rsa.pub

# Tools
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'reattach-to-user-namespace'
brew_install_or_upgrade 'wget' '--with-iri'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'ack'
brew_install_or_upgrade 'ctags'
brew_install_or_upgrade 'macvim' '--override-system-vim'
brew_install_or_upgrade 'ngrok'
brew_install_or_upgrade 'mosh'
brew_install_or_upgrade 'jq'
brew_install_or_upgrade 'httpie'
brew_install_or_upgrade 'youtube-dl'
brew_install_or_upgrade 'cmake'
brew_install_or_upgrade 'heroku-toolbelt'

# Databases/Languages
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'go'
brew_install_or_upgrade 'carthage'

brew_install_or_upgrade 'chruby-fish'
brew_install_or_upgrade 'ruby-install'

brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force

ruby_version="ruby 2.2.1"

if ! ruby -v | grep -Fq "$ruby_version"; then
  ruby-install $ruby_version -c --no-reinstall
  echo $ruby_version > ~/.ruby-version
  append_to_zshrc 'source /usr/local/share/chruby/chruby.sh'
  append_to_zshrc 'source /usr/local/share/chruby/auto.sh'
fi

source /usr/local/share/chruby/chruby.sh
chruby ruby-2.2.1

gem update --system
gem_install_or_update 'bundler'
gem_install_or_update 'rails'
gem_install_or_update 'cocoapods'
gem_install_or_update 'synx'
gem_install_or_update 'tmuxinator'

brew_install_or_upgrade 'nvm'
if [ ! -d "$HOME/.nvm/" ]; then
  mkdir "$HOME/.nvm"
  ln -s "$(brew --prefix nvm)/nvm.sh" ~/.nvm/nvm.sh
fi

export NVM_DIR=~/.nvm

if ! command -v npm >/dev/null; then
  source ~/.nvm/nvm.sh
  fancy_echo "Installing Node"
  nvm install stable
  nvm alias default stable
fi

if ! command -v rcup >/dev/null; then
  brew_tap 'thoughtbot/formulae'
  brew_install_or_upgrade 'rcm'
  git clone git@github.com:NanoXD/dotfiles.git ~/.dotfiles
  rcup -x apps
fi

if [ ! -d "$HOME/Dev" ]; then
  fancy_echo "Creating Dev folder"
  mkdir ~/Dev
fi

# homebrew-cask
export HOMEBREW_CASK_OPTS=--appdir=/Applications
brew_tap 'caskroom/cask'
brew_tap 'caskroom/fonts'
brew_install_or_upgrade 'caskroom/cask/brew-cask'

cask_install 'alfred'
cask_install 'appdelete'
cask_install 'atom'
cask_install 'bartender'
cask_install 'electrum'
cask_install 'font-ubuntu-mono-powerline'
cask_install 'font-fantasque-sans-mono'
cask_install 'genymotion'
cask_install 'gifs'
cask_install 'imageoptim'
cask_install 'iterm2'
cask_install 'karabiner'
cask_install 'kaleidoscope'
cask_install 'mplayerx'
cask_install 'paw'
cask_install 'postgres'
cask_install 'seil'
cask_install 'sketch'
cask_install 'sketch-toolbox'
cask_install 'spillo'
cask_install 'the-unarchiver'
cask_install 'tower'
cask_install 'xscope'
