#!/usr/bin/env sh

fancy_echo() {
  local fmt="$1"; shift

  printf "\n$fmt\n" "$@"
}

wait_for_input() {
  fancy_echo "$1"
  read -n 1
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$zshrc"
    else
      printf "\n%s\n" "$text" >> "$zshrc"
    fi
  fi
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

update_shell() {
  local shell_path;
  shell_path="$(which zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  chsh -s "$shell_path"
}

case "$SHELL" in
  */zsh)
    if [ "$(which zsh)" != '/bin/zsh' ]; then
      update_shell
    fi
    ;;
  *)
    update_shell
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@" --no-document
  fi
}

pip_install_or_update() {
  local package="$1"
  if pip_is_installed $package > /dev/null; then
    fancy_echo "Updating %s ..." "$package"
    pip3 install --upgrade $package
  else
    fancy_echo "Installing %s ..." "$package"
    pip3 install $package
  fi
}

pip_is_installed() {
  pip3 list | grep "$1"
}

find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

generate_ssh_key() {
  ssh-keygen -a 100 -t ed25519
  ssh-add ~/.ssh/id_ed25519
  pbcopy < ~/.ssh/id_ed25519.pub
}

if ! command -v brew >/dev/null; then
  # Empty out dock
  defaults write com.apple.dock persistent-apps -array
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update
brew tap Homebrew/bundle

make brew

if ! cat /etc/shells | grep -Fq fish; then
  fancy_echo "Adding fish to /etc/shells"
  echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
fi

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  if [[ ! -f ~/.ssh/id_ed25519.pub ]]; then
    generate_ssh_key
    wait_for_input "Please add the SSH key to GitHub"
  fi

fancy_echo "Checking for GPG Key, generating one if it doesn't exist ..."
  if [[ ! -f ~/.gnupg/pubring.kbx ]]; then
    gpg --gen-key
    gpg_pub_key="$(gpg --list-keys --keyid-format LONG | grep pub | awk '{print $2}' | awk -F '/' '{print $2}' | xargs)"
    local_gitconfig="$HOME/.gitconfig.local"

    git config --file="$local_gitconfig" user.signingkey "$gpg_pub_key"
    gpg --armor --export | pbcopy
    git config --file="$local_gitconfig" commit.gpgsign true
    wait_for_input "Please add the GPG key to GitHub"
  fi

# Ruby Install
ruby_version="$(find_latest_ruby)"
append_to_zshrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  RUBY_CONFIGURE_OPTS=--with-openssl-dir=/usr/local/opt/openssl rbenv install -s "$ruby_version"
fi

rbenv global $ruby_version
rbenv shell "$ruby_version"

# Gems
make gems

fancy_echo "Installing Rust"
if [ ! -e "$HOME/.cargo/bin" ]; then
  curl https://sh.rustup.rs -sSf | sh
  append_to_zshrc 'export PATH="$HOME/.cargo/bin:$PATH"' 1

  source $HOME/.cargo/env
  rustup install nightly
  rustup default nightly
  rustup component add rust-analysis rust-src rls
  rustup component add rustfmt
  rustup component add clippy
fi

make rust

if [ ! -d "$HOME/.dotfiles/" ]; then
  cargo install --git https://github.com/ubnt-intrepid/dot.git
  dot init nanoxd/dotfiles
fi

pip_install_or_update 'diff-highlight'
pip_install_or_update 'pynvim'
pip_install_or_update 'neovim'

make yarn
make custom_bins
